#!/usr/bin/env python
import json, sys, os, re, shutil, shlex, getopt, platform, stat, ast
from distutils.util import strtobool
from subprocess import call, check_output, CalledProcessError

# Bind input to raw_input for py2/py3 compatibility
try:
   input = raw_input
except NameError:
   pass

HOME = os.path.expanduser("~")
SCRIPT_ROOT_DIR = os.path.join(HOME, '.vimpkg')
VIM_ROOT_DIR = os.path.join(HOME, '.vim')
BUNDLE_PATH = os.path.join(VIM_ROOT_DIR, 'bundle')
SRC_DIR = os.path.join(SCRIPT_ROOT_DIR, 'src')
BIN_DIR = os.path.join(SCRIPT_ROOT_DIR, 'bin')
VIM_CONFIG_PATH = os.path.join(SCRIPT_ROOT_DIR, 'vim_config.json')
GBL = 'global'
DPND = 'depends-on'
NAME = 'name'
TRG_DIR = 'install-target'
PKG_URL = 'pkg-url'
PKGS = 'packages'
RECIPE = 'recipe'
VIM_CONFIG = None
OS = 'os'
HOST_OS = platform.system().lower()
CWD = os.getcwd()
PKG_IDENTIFIER = '@vimpkg'
INSTALL_TARGET = ''

####### CMD LINE FLAGS #######
ASSUME_YES = False
JSON_INPUT = False


class PkgItem(object):
    def get_recipe(self):
        recipe = None
        if HOST_OS in self.recipe:
            recipe = self.recipe[HOST_OS]
        elif 'all' in self.recipe:
            recipe = self.recipe['all']
        if self.recipe and HOST_OS not in self.recipe and recipe is None:
            report_fail('No recipe for `' + self.name + '` for your OS')
        if recipe == None:
            recipe = []
        return recipe


class Dependency(PkgItem):
    def __init__(self, name='dep', recipe={}):
        self.name = name
        self.recipe = recipe

    def to_dict(self):
        # Convert python variable names to json variable names
        return {k.replace('_', '-'): v for k,v in list(self.__dict__.items())}

    @staticmethod
    def dict_to_dep(d):
        return Dependency(d[NAME], d[RECIPE])


class VimPackage(PkgItem):
    def __init__(self, pkg_url='', name='', depends_on=[], recipe={}):
        self.pkg_url = pkg_url
        self.name = name
        self.depends_on = depends_on
        self.recipe = recipe

    def to_dict(self):
        # Convert python variable names to json variable names
        d = {k.replace('_', '-'): v for k,v in list(self.__dict__.items())}
        deps = [ dep.to_dict() for dep in self.depends_on ]
        d[DPND] = deps
        return d

    @staticmethod
    def dict_to_vimpkg(d):
        deps = [ Dependency.dict_to_dep(dep) for dep in d[DPND] ]
        return VimPackage(d[PKG_URL], d[NAME], deps, d[RECIPE])


def load_vim_config(file_path=VIM_CONFIG_PATH):
    global VIM_CONFIG
    json_file = open(file_path).read()
    VIM_CONFIG = json.loads(json_file)

def get_install_target():
    path = VIM_CONFIG[GBL][TRG_DIR]
    path = path.replace('~', HOME)
    return path

def get_global_requirements():
    return [ req[NAME] for req in VIM_CONFIG[GBL][DPND] ]

def get_vimpkg(pkg_id):
    pkg_by_url = [ p for p in VIM_CONFIG[PKGS] if p[PKG_URL] == pkg_id ]
    if pkg_by_url:
        return VimPackage.dict_to_vimpkg(pkg_by_url[0])
    pkg_by_name = [ p for p in VIM_CONFIG[PKGS] if p[NAME] == pkg_id ]
    if pkg_by_name:
        return VimPackage.dict_to_vimpkg(pkg_by_name[0])
    return None

def find_files_with_type(file_extension, path=os.getcwd()):
    file_extension = file_extension.lower()
    result_files = []
    for root, dirs, files in os.walk(path):
        for f in files:
            f = os.path.join(root, f)
            if os.path.isfile(f):
                file_ext = os.path.splitext(f)[1]
                if file_ext.lower() in [file_extension, '.' + file_extension]:
                    result_files.append(os.path.abspath(f))
    return result_files

def get_pkg_from_local_json(filenames=None):
    if filenames is None:
        filenames = find_files_with_type('json', os.getcwd())

    for filename in filenames:
        with open(filename, 'r') as f:
            check = f.readline().strip()
            if check != PKG_IDENTIFIER:
                continue
            json = f.read()
        try:
            pkg = ast.literal_eval(json)
            return pkg
        except:
            print('Parse error. Please enter a valid JSON.')
            sys.exit(1)

def status_update(pkg_name):
    print('\nConfiguring and installing `' + pkg_name + '`')

def isInstalled(pkg_name, git_url):
    if pkg_name in [ p[NAME] for p in VIM_CONFIG[PKGS] ]:
        report_fail('Skipping installed package `' + pkg_name + '`' \
                + '\nTo re-install `' + pkg_name + '` run:' \
                + '\n\t`apt-vim update ' + git_url + '`')
        return True
    return False

def install_pkg(vimpkg, skip_clone=False):
    status_update(vimpkg.name)
    # Install dependencies of package
    install_dependencies(vimpkg)
    # Clone the plugin and run any post-install commands
    if not skip_clone:
        clone_pkg(vimpkg.pkg_url, vimpkg.name)
    os.chdir(INSTALL_TARGET)
    os.chdir(vimpkg.name)
    if not exe_shell_commands(vimpkg.get_recipe()):
        report_fail('Failed to intall ' + vimpkg.name)
    # Change back to the DIR containing this script
    os.chdir(SCRIPT_ROOT_DIR)

def get_pkg_name(git_url):
    vimpkg = get_vimpkg(git_url)
    if vimpkg:
        return vimpkg.name
    if ASSUME_YES:
        return get_pkg_name_from_url(git_url)
    pkg_name = input('Enter a name for package `' + git_url + '` (<ENTER> for automatic naming):  ')
    if not pkg_name:
        pkg_name = get_pkg_name_from_url(git_url)
    return pkg_name

def add_new_pkg(pkg_name, git_url, skipInstalledCheck=False):
    if not pkg_name:
        report_fail('Each package must have a non-blank name.',
                confirm_continue=False)
    elif not skipInstalledCheck and isInstalled(pkg_name, git_url):
        return None
    vimpkg = VimPackage(pkg_url=git_url)
    vimpkg.name = pkg_name

    # Get dependencies of package
    depends = get_depend(pkg_name)
    vimpkg.depends_on = depends

    msg = 'Any commands to run after cloning `' + pkg_name + '`?'
    post_install_recipe = get_recipe(msg)
    if post_install_recipe:
        vimpkg.recipe[HOST_OS] = post_install_recipe
    return vimpkg

def clone_pkg(git_url, pkg_name=None):
    # Change to directory with vim plugins
    os.chdir(INSTALL_TARGET)
    if git_url:
        if not pkg_name:
            pkg_name = get_pkg_name_from_url(git_url)
        if os.path.exists(os.path.join(INSTALL_TARGET, pkg_name)):
            report_fail('Skipping installed package `' + pkg_name + '`' \
                        + '\nTo re-install `' + pkg_name + '` run:' \
                        + '\n\t`apt-vim update ' + git_url + '`')
            return
        if pkg_name and not call_silent(['git', 'clone', git_url, pkg_name]):
            report_fail('Failed to clone `' + pkg_name + '`')
    if pkg_name and not os.path.exists(pkg_name):
        os.makedirs(pkg_name)
    if os.path.exists(pkg_name):
        os.chdir(pkg_name)

def rename_pkg(old_name, new_name):
    if old_name == new_name:
        return
    check_unique_pkg_name(new_name)
    with open(VIM_CONFIG_PATH, 'r') as f:
        content = f.read()
    replaced_content = content.replace(old_name, new_name)
    with open(VIM_CONFIG_PATH, 'w') as f:
        f.write(replaced_content)
    # Move the cloned vim plugin
    old_dir = os.path.join(INSTALL_TARGET, old_name)
    if os.path.exists(old_dir):
        new_dir = os.path.join(INSTALL_TARGET, new_name)
        shutil.move(old_dir, new_dir)
    # Move any source files corresponding to the vim plugin
    old_dir = os.path.join(SRC_DIR, old_name)
    if os.path.exists(old_dir):
        new_dir = os.path.join(SRC_DIR, new_name)
        shutil.move(old_dir, new_dir)

def install_dependencies(vimpkg):
    pkg_name = vimpkg.name
    dependencies = vimpkg.depends_on
    if dependencies:
        # Change to directory with dependency source
        os.chdir(SRC_DIR)
        if not os.path.exists(pkg_name):
            os.makedirs(pkg_name)
        os.chdir(pkg_name)

    for dep in dependencies:
        if not check_requirements([dep.name]):
            commands = dep.get_recipe()
            if not exe_shell_commands(commands):
                report_fail('Failed to intall ' + pkg_name)
            else:
                exe = find_executable(SRC_DIR, dep.name)
                if exe:
                    dst = os.path.join(BIN_DIR, dep.name)
                    shutil.copyfile(exe, dst)
        else:
            print('`' + dep.name + '` already in PATH')

def find_executable(path, filename):
    executable = stat.S_IEXEC | stat.S_IXGRP | stat.S_IXOTH
    for root, dirs, files in os.walk(path):
        for f in files:
            f = os.path.join(root, f)
            if os.path.isfile(f):
                st = os.stat(f)
                mode = st.st_mode
                if mode & executable and filename in f:
                    return os.path.abspath(f)
    return None

def user_confirm(msg=None):
    if ASSUME_YES:
        return True

    if msg is None:
        msg = 'Do you wish to continue anyways?'
    msg += ' [y|N]:  '
    num_tries = 0
    while num_tries < 3:
        try:
            user_choice = input(msg).strip().lower()
            if strtobool(user_choice):
                return True
            return False
        except:  # Invalid option, retry
            print('Invalid option. Please enter `Y` or `N` only')
            num_tries += 1
    sys.exit(1)

def report_fail(fail_msg=None, confirm_msg=None, confirm_continue=True):
    if fail_msg is None:
        fail_msg = 'Something went wrong...\n'
    print(fail_msg)
    if confirm_continue:
        if user_confirm(confirm_msg):
            return True
    sys.exit(1)


def print_packages():
    installed = sorted(get_installed_pkgs(), key=lambda s: s.lower())
    available = [ [p[NAME], p[PKG_URL]] for p in VIM_CONFIG[PKGS] if p[NAME] not in installed ]
    print('Installed packages: ')
    for pkg in installed:
        print('\t' + pkg)
    if available:
        print('\nAvailable packages (install with `apt-vim install -y <URL>`): ')
        for pkg in available:
            print('\t' + pkg[1])
    print('\n')

def add_overwrite(pkg_name, git_url):
    if user_confirm('Package `' + pkg_name + '` already exists. Do you wish to overwrite?'):
        vimpkg = get_vimpkg(git_url)
        # Delete plugin and its dependencies/src
        remove_pkg(vimpkg)
        # Delete package from json
        VIM_CONFIG[PKGS] = remove_pkg_ref(vimpkg)
        return True
    return False

def remove_pkg(vimpkg):
    remove_pkg_src(vimpkg)
    remove_pkg_plugin(vimpkg)
    # If no other package depends on this binary, remove it
    remove_pkg_bin(vimpkg)

def remove_dir(dir):
    if os.path.exists(dir):
        shutil.rmtree(dir)

def remove_pkg_bin(vimpkg):
    if os.path.exists(BIN_DIR):
        bins = os.listdir(BIN_DIR)
        for pkg in VIM_CONFIG[PKGS]:
            newpkg = VimPackage.dict_to_vimpkg(pkg)
            for dep in vimpkg.depends_on:
                if dep.name in bins and  \
                        dep.name not in [ d.name for d in newpkg.depends_on ] \
                        and os.path.exists(os.path.join(BIN_DIR, dep.name)):
                    os.remove(os.path.join(BIN_DIR, dep.name))
                    print('Removed binary `' + dep.name + '`')


def remove_pkg_src(vimpkg):
    dir = os.path.join(SRC_DIR, vimpkg.name)
    remove_dir(dir)

def remove_pkg_ref(vimpkg):
    return [ p for p in VIM_CONFIG[PKGS] if vimpkg.name not in p[NAME] ]

def remove_pkg_plugin(vimpkg):
    dir = os.path.join(INSTALL_TARGET, vimpkg.name)
    remove_dir(dir)

def get_depend(pkg_name='this plugin'):
    if ASSUME_YES:
        return [];
    depends = []
    if user_confirm('Does ' + pkg_name + ' have any Dependencies?'):
        print('\nEnter dependencies one at a time. You will be prompted' + \
                '\nto enter an installation recipe for each dependency.' + \
                '\nTerminate dependency list with an empty line.')
        i = 1;
        dep_name = input('Name for dependency ' + str(i) + ':  ')
        while dep_name != "":
            depends.append(__get_depend(dep_name))
            i += 1
            dep_name = input('Name for dependency ' + str(i) + ':  ')
    return depends

def __get_depend(name):
    dep = Dependency(name)
    recipe = get_recipe()
    # Only save the recipe if there is a recipe to save...
    if recipe:
        dep.recipe[HOST_OS] = recipe
    return dep

def get_recipe(msg=None):
    if ASSUME_YES:
        return []
    if msg is None or user_confirm(msg):
        return __get_recipe()
    else:
        return []

def __get_recipe():
    commands = []
    print('\nEnter commands one line at a time. ' + \
            'Terminate commands with an empty line.')
    i = 1
    command = input('Command ' + str(i) + ': ')
    while command != "":
        i += 1
        commands.append(command)
        command = input('Command ' + str(i) + ': ')
    return commands

def save_vim_config(vimpkg=None, file_path=None):
    if file_path is None:
        file_path = VIM_CONFIG_PATH
    try:
        with open(file_path) as f:
            data = json.load(f)

        if vimpkg:
            VIM_CONFIG[PKGS].append(vimpkg.to_dict())
        data[PKGS] = VIM_CONFIG[PKGS]
        with open(file_path, 'w') as f:
            json.dump(data, f, sort_keys=True, indent=4, separators=(',', ': '))
    except:
        report_fail('Failed to write ' + file_path, confirm_continue=False)

def get_pkg_name_from_url(git_url):
    pkg_regex = re.compile(r'.*\/([^\/]+).git$')
    match = pkg_regex.match(git_url)
    if match:
        return match.group(1)
    return ''

def check_requirements(requirements=None):
    if requirements is None:
        return True
    for req in requirements:
        if not call_silent(['which', req]):
            return False
    return True

def valid_url(url):
    regex = re.compile(
            r'^(?:http|ftp)s?://' # http:// or https:// or ftp:// or ftps://
            r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|' #domain...
            r'localhost|' #localhost...
            r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})' # ...or ip
            r'(?::\d+)?' # optional port
            r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    match = regex.search(url)
    return True if match else False

def call_silent(command):
    try:
        with open(os.devnull, 'wb') as devnull:
            exit_code = call(command, stdout=devnull)
            if exit_code:
                return False
    except CalledProcessError:
        return False
    return True

def usage():
    pass

def exe_shell_commands(commands=None):
    if commands is None:
        commands = []
    for com in commands:
        com = com.replace('~', HOME)
        try:
            if 'cd' in com:
                os.chdir(shlex.split(com)[1])
            else:
                call(shlex.split(com))
        except:
            global ASSUME_YES
            prev_assume = ASSUME_YES
            ASSUME_YES = False
            user_response = report_fail('Command `' + com + '` failed.')
            ASSUME_YES = prev_assume
            return user_response
    return True

def port_vim_plugins():
    global ASSUME_YES
    src_dir = BUNDLE_PATH + '.bak'
    install_target = get_install_target()
    if not os.path.exists(src_dir):
        return
    os.chdir(src_dir)
    git_origin = shlex.split('git config --get remote.origin.url')
    plugins = os.listdir(src_dir)
    for pkg_name in plugins:
        try:
            target_dir = os.path.join(install_target, pkg_name)
            shutil.copytree(pkg_name, target_dir)
            os.chdir(pkg_name)
            ASSUME_YES = True
            git_url = check_output(git_origin).strip()
            vimpkg = add_new_pkg(pkg_name, git_url, skipInstalledCheck=True)
            save_vim_config(vimpkg)
        except:
            continue
        finally:
            ASSUME_YES = False
            os.chdir(src_dir)

def first_run():
    if os.path.exists(SCRIPT_ROOT_DIR):
        report_fail("There's already an apt-vim config file at " + os.path.abspath(SCRIPT_ROOT_DIR),
                    "Are you sure you want to continue with setup?")
    if os.path.exists(VIM_ROOT_DIR):
        # Make a backup of the users ~/.vim dir, for safety
        shutil.copytree(VIM_ROOT_DIR, os.path.join(HOME, '.vim.bak'))
    else:
        os.makedirs(VIM_ROOT_DIR)

    if not os.path.exists(SCRIPT_ROOT_DIR):
        os.makedirs(SCRIPT_ROOT_DIR)
    # Copy the config file to ~/.vimpkg/vim_config.json
    shutil.copy('vim_config.json', VIM_CONFIG_PATH)
    load_vim_config()
    install_target = get_install_target()

    if os.path.lexists(BUNDLE_PATH):
        dest_path = BUNDLE_PATH + '.bak'
        shutil.move(BUNDLE_PATH, dest_path)
    if not os.path.exists(install_target):
        os.makedirs(install_target)
    os.symlink(install_target, BUNDLE_PATH)
    if not os.path.exists(BIN_DIR):
        os.makedirs(BIN_DIR)
    if not os.path.exists(SRC_DIR):
        os.makedirs(SRC_DIR)
    if not call_silent(['sudo', 'cp', os.path.realpath(__file__), '/usr/local/bin']):
        report_fail('Failed to copy `apt-vim` to `/usr/local/bin`\n' + \
            'Please ensure that `apt-vim` is in your PATH',
            confirm_continue=False)

    port_vim_plugins()

    with open('/etc/profile', 'w') as f:
        export = 'export PATH=$PATH:' + os.path.abspath(BIN_DIR)
        f.write(export)
    #if not exe_shell_commands(["sudo echo 'export PATH=$PATH:" + os.path.abspath(BIN_DIR) + "' >> /etc/profile"]):
        #report_fail('Failed to add `' + os.path.abspath(BIN_DIR) + '` to `PATH` via /etc/profile.\n' + \
            #'Please manually add `' + os.path.abspath(BIN_DIR) + '` your PATH',
            #confirm_continue=False)

    missing_dependencies = init()
    if missing_dependencies:
        report_fail('Cannot proceed. Missing the following dependencies that could' \
                + ' not be automatically insatlled:\n' \
                + str(missing_dependencies),
                confirm_continue=False)

    print('Completed successfully')
    sys.exit(0)

def verify_bin_in_path():
    if '.vimpkg/bin' not in os.environ['PATH']:
        msg = 'FAILED!\n' + os.path.abspath(BIN_DIR) + ' not found in PATH' + \
            '\n\nPlease ensure that ' + os.path.abspath(BIN_DIR) + \
            ' is in your PATH'
        report_fail(msg, confirm_continue=False)

def init():
    verify_bin_in_path()
    load_vim_config()
    global INSTALL_TARGET
    INSTALL_TARGET = get_install_target()
    missing_deps = []
    deps = VIM_CONFIG[GBL][DPND]
    for dep in deps:
        dep = Dependency.dict_to_dep(dep)
        if not check_requirements([dep.name]):
            if not exe_shell_commands(dep.get_recipe()):
                missing_deps.append(dep.name)
    return missing_deps

def get_urls_from_list(check_list):
    urls = []
    for item in check_list:
        if valid_url(item):
            urls.append(item)
    return urls

def get_installed_pkgs():
    return os.listdir(BUNDLE_PATH)

def get_vimpkg_from_json_input():
    input_str = ''
    line = input().strip()
    while line != "":
        input_str += line
        line = input().strip()
    try:
        input_dict = ast.literal_eval(input_str)
    except:
        print('Parse error. Please enter a valid JSON.')
        sys.exit(1)
    vimpkg = VimPackage.dict_to_vimpkg(input_dict)
    return vimpkg

def check_unique_pkg_name(pkg_name):
    if pkg_name in [ p[NAME] for p in VIM_CONFIG[PKGS] ]:
        report_fail('FAILED!\nEach package must have a unique name. ' +
                'A package with name `' + pkg_name + '` already exists.',
                confirm_continue=False)

def handle_install(argv, options, pkg_ids):
    if JSON_INPUT:
        vimpkg = get_vimpkg_from_json_input()
        save_vim_config(vimpkg)
        install_pkg(vimpkg)
    elif not pkg_ids:
        # No options and no git URL passed
        pkgs = [ p for p in VIM_CONFIG[PKGS] if  \
                p[NAME] not in get_installed_pkgs() ]
        for pkg in pkgs:
            vimpkg = VimPackage.dict_to_vimpkg(pkg)
            if ASSUME_YES or user_confirm('Install `' + vimpkg.name + '`?'):
                install_pkg(vimpkg)
    else:
        for git_url in pkg_ids:
            vimpkg = get_vimpkg(git_url)
            skip_clone = False
            if not vimpkg:
                # Clone, then check for local JSON recipe
                pkg_name = get_pkg_name_from_url(git_url)
                if isInstalled(pkg_name, git_url):
                    continue
                clone_pkg(git_url, pkg_name)
                skip_clone = True
                pkg = get_pkg_from_local_json()
                if pkg:
                    # Local recipe provided, use it
                    vimpkg = VimPackage.dict_to_vimpkg(pkg)
                    rename_pkg(pkg_name, vimpkg.name)
                else:
                    # No local recipe, prompt user for one
                    pkg_name = get_pkg_name(git_url)
                    check_unique_pkg_name(pkg_name)
                    vimpkg = add_new_pkg(pkg_name, git_url)
                save_vim_config(vimpkg)
            install_pkg(vimpkg, skip_clone)

def handle_add(argv, options, pkg_ids):
    if JSON_INPUT:
        vimpkg = get_vimpkg_from_json_input()
        save_vim_config(vimpkg)
    else:
        for git_url in pkg_ids:
            pkg_name = get_pkg_name(git_url)
            check_unique_pkg_name(pkg_name)
            if git_url in [ p[PKG_URL] for p in VIM_CONFIG[PKGS] ]:
                if not add_overwrite(pkg_name, git_url):
                    continue
            vimpkg = add_new_pkg(pkg_name, git_url)
            save_vim_config(vimpkg)

def __handle_remove(argv, options, pkg_ids, delete=False):
    if not pkg_ids:
        report_fail('No package URL specified. Exiting', confirm_continue=False)
    for git_url in pkg_ids:
        vimpkg = get_vimpkg(git_url)
        if not vimpkg:
            report_fail('No package with ID `' + git_url + '`')
            continue
        pkg_name = vimpkg.name
        msg = 'Confirm remove package `' + pkg_name + '`'
        if ASSUME_YES or user_confirm(msg):
            remove_pkg(vimpkg)
            if delete:
                VIM_CONFIG[PKGS] = remove_pkg_ref(vimpkg)
                save_vim_config()
            print('Successfully removed package `' + pkg_name + '`')
        else:
            print('Skipped removal of `' + pkg_name +'`')

# Remove a package from the plugins dir, but KEEP the recipe
def handle_remove(argv, options, pkg_ids):
    return __handle_remove(argv, options, pkg_ids, delete=False)

# Remove a package from the plugins dir, and REMOVE the recipe
def handle_delete(argv, options, pkg_ids):
    return __handle_remove(argv, options, pkg_ids, delete=True)

def handle_update(argv, options, pkg_ids):
    if not pkg_ids:  # If no urls provided, assume updating all packages in vim_config
        pkg_ids = [ p[PKG_URL] for p in VIM_CONFIG[PKGS] ]
        if not pkg_ids:
            report_fail('No package URL specified. Exiting', confirm_continue=False)
    for git_url in pkg_ids:
        vimpkg = get_vimpkg(git_url)
        if vimpkg:
            pkg_name = vimpkg.name
            msg = 'Confirm update package `' + pkg_name + '`'
            if ASSUME_YES or user_confirm(msg):
                remove_pkg(vimpkg)
                install_pkg(vimpkg)
                print('Successfully updated package `' + pkg_name + '`')
            else:
                print('Skipped updating package `' + pkg_name +'`')
        else:
            print('Package not installed: ' + git_url)
            if user_confirm('Would you like to install it?'):
                if valid_url(git_url):
                    handle_install(None, None, [git_url])
                else:
                    report_fail('`' + git_url + '` is not a valid URL. Skipping install.')


MODES = { 'init': first_run, 'install': handle_install, 'remove': handle_remove, \
        'delete': handle_delete, 'update': handle_update, 'add': handle_add, 'list': print_packages }

def process_cmd_args():
    argv = sys.argv[1:]
    if not argv:
        usage()
    mode = argv[0].lower()
    if mode not in MODES:
        usage()
    else:
        if mode == 'init':
            MODES[mode]()
            return

        missing_dependencies = init()
        if mode == 'list':
            MODES[mode]()
            sys.exit(0)
        if missing_dependencies:
            report_fail('Cannot proceed. Missing the following dependencies that could' \
                    + ' not be automatically insatlled:\n' \
                    + str(missing_dependencies),
                    confirm_continue=False)

        options, remainder = getopt.getopt(argv[1:], 'yj', ['assume-yes', 'json'])
        for opt,arg in options:
            if opt in ('-y', '--assume-yes'):
                global ASSUME_YES
                ASSUME_YES = True
            if opt in ('-j', '--json'):
                global JSON_INPUT
                JSON_INPUT = True
        MODES[mode](argv[1:], options, remainder)

def usage():
    print('Valid modes: ', str(sorted(list(MODES.keys()), key=lambda s: s.lower())), '\n')
    sys.exit(1)

def main():
    process_cmd_args()
    print('Completed successfully!')


if __name__ == '__main__':
    main()
    sys.exit(0)

